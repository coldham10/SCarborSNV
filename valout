==1870== Memcheck, a memory error detector
==1870== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1870== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==1870== Command: ./SCarborSNV -t 4 -m 3
==1870== 
terminate called after throwing an instance of 'std::invalid_argument'
  what():  stoi
==1870== 
==1870== Process terminating with default action of signal 6 (SIGABRT)
==1870==    at 0x59D8E97: raise (raise.c:51)
==1870==    by 0x59DA800: abort (abort.c:79)
==1870==    by 0x50E78B6: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x50EDA05: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x50EDA40: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x50EDC73: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x50E9742: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x10AEAD: int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) (string_conversions.h:83)
==1870==    by 0x10ADC8: std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (basic_string.h:6364)
==1870==    by 0x10A970: sequence_utils::clean_fill(read*, int, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (sequence_utils.cpp:78)
==1870==    by 0x111C0D: piler_module::Locus::add_cell(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (piler_locus.cpp:28)
==1870==    by 0x10F0AA: piler_module::Piler::make_batch() (piler.cpp:151)
==1870== 
==1870== HEAP SUMMARY:
==1870==     in use at exit: 47,749 bytes in 231 blocks
==1870==   total heap usage: 2,231 allocs, 2,000 frees, 202,395 bytes allocated
==1870== 
==1870== 144 bytes in 1 blocks are possibly lost in loss record 11 of 17
==1870==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1870==    by 0x50EC83F: __cxa_allocate_exception (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x5115FF2: std::__throw_invalid_argument(char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==1870==    by 0x10AEAD: int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) (string_conversions.h:83)
==1870==    by 0x10ADC8: std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (basic_string.h:6364)
==1870==    by 0x10A970: sequence_utils::clean_fill(read*, int, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (sequence_utils.cpp:78)
==1870==    by 0x111C0D: piler_module::Locus::add_cell(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (piler_locus.cpp:28)
==1870==    by 0x10F0AA: piler_module::Piler::make_batch() (piler.cpp:151)
==1870==    by 0x10EDC0: piler_module::Piler::fill_queue() (piler.cpp:87)
==1870==    by 0x10ED56: piler_module::Piler::try_fill_queue() (piler.cpp:78)
==1870==    by 0x10EB85: piler_module::Piler::get_next_batch() (piler.cpp:39)
==1870==    by 0x111625: main (scarborsnv.cpp:28)
==1870== 
==1870== LEAK SUMMARY:
==1870==    definitely lost: 0 bytes in 0 blocks
==1870==    indirectly lost: 0 bytes in 0 blocks
==1870==      possibly lost: 144 bytes in 1 blocks
==1870==    still reachable: 47,605 bytes in 230 blocks
==1870==                       of which reachable via heuristic:
==1870==                         stdstring          : 29 bytes in 1 blocks
==1870==         suppressed: 0 bytes in 0 blocks
==1870== Reachable blocks (those to which a pointer was found) are not shown.
==1870== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1870== 
==1870== For counts of detected and suppressed errors, rerun with: -v
==1870== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
